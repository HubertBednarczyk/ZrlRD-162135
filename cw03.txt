ZADANIE 1

SELECT employee_id, last_name, salary,
       RANK() OVER (ORDER BY salary DESC) AS salary_rank
FROM employees;


ZADANIE 2

SELECT employee_id, last_name, salary,
       SUM(salary) OVER () AS total_salary
FROM employees;


ZADANIE 3

CREATE TABLE sales AS SELECT * FROM hr.sales;
CREATE TABLE products AS SELECT * FROM hr.products;

ZADANIE 4

SELECT e.last_name,
       p.product_name,
       SUM(s.quantity * s.price) OVER (PARTITION BY e.employee_id ORDER BY s.sale_date) AS running_total,
       RANK() OVER (ORDER BY s.quantity * s.price DESC) AS sales_rank
FROM sales s
JOIN employees e ON s.employee_id = e.employee_id
JOIN products p ON s.product_id = p.product_id;


ZADANIE 5

SELECT e.last_name,
       p.product_name,
       s.price,
       COUNT(*) OVER (PARTITION BY s.product_id, s.sale_date) AS transactions_count,
       SUM(s.price * s.quantity) OVER (PARTITION BY s.product_id, s.sale_date) AS daily_total,
       LAG(s.price) OVER (PARTITION BY s.product_id ORDER BY s.sale_date) AS previous_price,
       LEAD(s.price) OVER (PARTITION BY s.product_id ORDER BY s.sale_date) AS next_price
FROM sales s
JOIN products p ON s.product_id = p.product_id
JOIN employees e ON s.employee_id = e.employee_id;


ZADANIE 6

SELECT p.product_name,
       s.price,
       TO_CHAR(s.sale_date, 'YYYY-MM') AS sales_month,
       SUM(s.price * s.quantity) OVER (
           PARTITION BY p.product_id, TO_CHAR(s.sale_date, 'YYYY-MM')
       ) AS monthly_total,
       SUM(s.price * s.quantity) OVER (
           PARTITION BY p.product_id, TO_CHAR(s.sale_date, 'YYYY-MM')
           ORDER BY s.sale_date
       ) AS monthly_running_total
FROM sales s
JOIN products p ON s.product_id = p.product_id;


ZADANIE 7

----


ZADANIE 8

SELECT p.product_category, p.product_name, s.price,
       MIN(s.price) OVER (PARTITION BY p.product_category) AS min_price,
       MAX(s.price) OVER (PARTITION BY p.product_category) AS max_price,
       (MAX(s.price) OVER (PARTITION BY p.product_category) - MIN(s.price) OVER (PARTITION BY p.product_category)) AS price_range
FROM sales s
JOIN products p ON s.product_id = p.product_id;


ZADANIE 9

SELECT p.product_name,
       s.sale_date,
       s.price,
       ROUND(
         AVG(s.price) OVER (
             PARTITION BY s.product_id
             ORDER BY s.sale_date
             ROWS BETWEEN 1 PRECEDING AND 1 FOLLOWING
         ), 2
       ) AS moving_avg
FROM sales s
JOIN products p ON s.product_id = p.product_id;



ZADANIE 10

SELECT p.product_name,
       p.product_category,
       s.price,
       RANK() OVER (PARTITION BY p.product_category ORDER BY s.price DESC) AS price_rank,
       ROW_NUMBER() OVER (PARTITION BY p.product_category ORDER BY s.price DESC) AS row_number,
       DENSE_RANK() OVER (PARTITION BY p.product_category ORDER BY s.price DESC) AS dense_rank
FROM sales s
JOIN products p ON s.product_id = p.product_id;


ZADANIE 11

SELECT e.last_name,
       p.product_name,
       SUM(s.price * s.quantity) OVER (
           PARTITION BY e.employee_id
           ORDER BY s.sale_date
       ) AS running_sales,
       RANK() OVER (
           ORDER BY s.price * s.quantity DESC
       ) AS global_order_rank
FROM sales s
JOIN products p ON s.product_id = p.product_id
JOIN employees e ON s.employee_id = e.employee_id;


ZADANIE 12

SELECT DISTINCT e.first_name, e.last_name, j.job_title
FROM employees e
JOIN sales s ON e.employee_id = s.employee_id
JOIN jobs j ON e.job_id = j.job_id;
