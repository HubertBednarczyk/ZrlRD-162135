-- I. Usunięcie istniejących tabel
DROP TABLE EMPLOYEES CASCADE CONSTRAINTS;
DROP TABLE DEPARTMENTS CASCADE CONSTRAINTS;
DROP TABLE JOBS CASCADE CONSTRAINTS;
DROP TABLE JOB_HISTORY CASCADE CONSTRAINTS;
DROP TABLE JOB_GRADES CASCADE CONSTRAINTS;
DROP TABLE LOCATIONS CASCADE CONSTRAINTS;
DROP TABLE COUNTRIES CASCADE CONSTRAINTS;
DROP TABLE REGIONS CASCADE CONSTRAINTS;

-- II. Skopiowanie tabel z danymi od użytkownika HR
CREATE TABLE EMPLOYEES AS SELECT * FROM HR.EMPLOYEES;
CREATE TABLE DEPARTMENTS AS SELECT * FROM HR.DEPARTMENTS;
CREATE TABLE JOBS AS SELECT * FROM HR.JOBS;
CREATE TABLE JOB_HISTORY AS SELECT * FROM HR.JOB_HISTORY;
CREATE TABLE JOB_GRADES AS SELECT * FROM HR.JOB_GRADES;
CREATE TABLE LOCATIONS AS SELECT * FROM HR.LOCATIONS;
CREATE TABLE COUNTRIES AS SELECT * FROM HR.COUNTRIES;
CREATE TABLE REGIONS AS SELECT * FROM HR.REGIONS;

-- III. Ustawienie kluczy głównych i obcych
ALTER TABLE EMPLOYEES ADD PRIMARY KEY (EMPLOYEE_ID);
ALTER TABLE DEPARTMENTS ADD PRIMARY KEY (DEPARTMENT_ID);
ALTER TABLE JOBS ADD PRIMARY KEY (JOB_ID);
ALTER TABLE JOB_HISTORY ADD PRIMARY KEY (EMPLOYEE_ID, START_DATE);
ALTER TABLE JOB_GRADES ADD PRIMARY KEY (GRADE_LEVEL);
ALTER TABLE LOCATIONS ADD PRIMARY KEY (LOCATION_ID);
ALTER TABLE COUNTRIES ADD PRIMARY KEY (COUNTRY_ID);
ALTER TABLE REGIONS ADD PRIMARY KEY (REGION_ID);

ALTER TABLE EMPLOYEES ADD FOREIGN KEY (DEPARTMENT_ID) REFERENCES DEPARTMENTS(DEPARTMENT_ID);
ALTER TABLE EMPLOYEES ADD FOREIGN KEY (JOB_ID) REFERENCES JOBS(JOB_ID);
ALTER TABLE JOB_HISTORY ADD FOREIGN KEY (EMPLOYEE_ID) REFERENCES EMPLOYEES(EMPLOYEE_ID);
ALTER TABLE DEPARTMENTS ADD FOREIGN KEY (LOCATION_ID) REFERENCES LOCATIONS(LOCATION_ID);
ALTER TABLE LOCATIONS ADD FOREIGN KEY (COUNTRY_ID) REFERENCES COUNTRIES(COUNTRY_ID);
ALTER TABLE COUNTRIES ADD FOREIGN KEY (REGION_ID) REFERENCES REGIONS(REGION_ID);

-- 1) Wynagrodzenie dla departamentów 20 i 50
DROP VIEW V_EMPLOYEES_SALARY;
CREATE VIEW V_EMPLOYEES_SALARY AS
SELECT LAST_NAME || ' - ' || SALARY AS WYNAGRODZENIE
FROM EMPLOYEES
WHERE DEPARTMENT_ID IN (20, 50) AND SALARY BETWEEN 2000 AND 7000
ORDER BY LAST_NAME;


-- 2) Data zatrudnienia, nazwisko i kolumna podana przez użytkownika dla pracowników zatrudnionych w 2005
CREATE VIEW V_EMPLOYEES_2005 AS
SELECT HIRE_DATE, LAST_NAME, SALARY
FROM EMPLOYEES
WHERE MANAGER_ID IS NOT NULL AND TO_CHAR(HIRE_DATE, 'YYYY') = '2005'
ORDER BY SALARY;


-- 3) Imię, nazwisko, zarobki, telefon dla osób z trzecim znakiem 'e' i fragmentem imienia podanym przez użytkownika
CREATE VIEW V_EMPLOYEE_PHONE AS
SELECT FIRST_NAME || ' ' || LAST_NAME AS FULL_NAME, SALARY, PHONE_NUMBER
FROM EMPLOYEES
WHERE SUBSTR(LAST_NAME, 3, 1) = 'e' AND FIRST_NAME LIKE '%' || :USER_INPUT || '%'
ORDER BY FULL_NAME DESC, SALARY ASC;

-- 4) Przepracowane miesiące, wynagrodzenie, dodatek
CREATE VIEW V_EMPLOYEE_BONUS AS
SELECT FIRST_NAME, LAST_NAME,
       ROUND(MONTHS_BETWEEN(SYSDATE, HIRE_DATE)) AS MONTHS_WORKED,
       CASE
           WHEN ROUND(MONTHS_BETWEEN(SYSDATE, HIRE_DATE)) < 150 THEN SALARY * 0.1
           WHEN ROUND(MONTHS_BETWEEN(SYSDATE, HIRE_DATE)) BETWEEN 150 AND 200 THEN SALARY * 0.2
           ELSE SALARY * 0.3
       END AS BONUS
FROM EMPLOYEES
ORDER BY MONTHS_WORKED;

-- 5) Departamenty, gdzie minimalna płaca jest większa niż 5000
CREATE VIEW V_DEPT_SALARY AS
SELECT DEPARTMENT_ID, SUM(SALARY) AS TOTAL_SALARY, ROUND(AVG(SALARY)) AS AVERAGE_SALARY
FROM EMPLOYEES
GROUP BY DEPARTMENT_ID
HAVING MIN(SALARY) > 5000;

-- 6) Pracownicy w Toronto
CREATE VIEW V_EMPLOYEES_TORONTO AS
SELECT LAST_NAME, DEPARTMENT_ID, DEPARTMENT_NAME, JOB_ID
FROM EMPLOYEES
JOIN DEPARTMENTS USING (DEPARTMENT_ID)
JOIN LOCATIONS USING (LOCATION_ID)
WHERE CITY = 'Toronto';

-- 7) Współpracownicy Jennifer
CREATE VIEW V_EMP_JENNIFER AS
SELECT E1.FIRST_NAME, E1.LAST_NAME, E2.FIRST_NAME AS COLLEAGUE_FIRST, E2.LAST_NAME AS COLLEAGUE_LAST
FROM EMPLOYEES E1
JOIN EMPLOYEES E2 ON E1.DEPARTMENT_ID = E2.DEPARTMENT_ID
WHERE E1.FIRST_NAME = 'Jennifer' AND E1.EMPLOYEE_ID <> E2.EMPLOYEE_ID;

-- 8) Departamenty bez pracowników
CREATE VIEW V_EMPTY_DEPARTMENTS AS
SELECT DEPARTMENT_ID, DEPARTMENT_NAME
FROM DEPARTMENTS
WHERE DEPARTMENT_ID NOT IN (SELECT DISTINCT DEPARTMENT_ID FROM EMPLOYEES);

-- 9) Pracownicy, ID pracy, nazwa departamentu, zarobki, grade
CREATE VIEW V_EMPLOYEE_GRADES AS
SELECT E.FIRST_NAME, E.LAST_NAME, E.JOB_ID, D.DEPARTMENT_NAME, E.SALARY, JG.GRADE_LEVEL
FROM EMPLOYEES E
JOIN DEPARTMENTS D USING (DEPARTMENT_ID)
JOIN JOB_GRADES JG ON E.SALARY BETWEEN JG.LOWEST_SALARY AND JG.HIGHEST_SALARY;

-- 10) Pracownicy zarabiający więcej niż średnia
CREATE VIEW V_ABOVE_AVG_SALARY AS
SELECT FIRST_NAME, LAST_NAME, SALARY
FROM EMPLOYEES
WHERE SALARY > (SELECT AVG(SALARY) FROM EMPLOYEES)
ORDER BY SALARY DESC;

-- 11) Pracownicy pracujący w departamentach z osobami mającymi "u" w nazwisku
CREATE VIEW V_EMP_WITH_U AS
SELECT DISTINCT E.EMPLOYEE_ID, E.FIRST_NAME, E.LAST_NAME
FROM EMPLOYEES E
WHERE E.DEPARTMENT_ID IN (
    SELECT DISTINCT DEPARTMENT_ID FROM EMPLOYEES WHERE LAST_NAME LIKE '%u%'
);
